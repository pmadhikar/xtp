/*
 * Copyright 2009-2016 The VOTCA Development Team (http://www.votca.org)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

#ifndef __VOTCA_KMC_VSSMGROUP_H_
#define __VOTCA_KMC_VSSMGROUP_H_


#include <votca/xtp/events.h>
#include <votca/xtp/eventinfo.h>

namespace votca { namespace xtp {
  
using namespace std;

class Vssmgroup {
    
public:
    
    /// Compute the total sum of all rates of both non-injection and injection binary sum trees
    void Recompute_device(Bsumtree* non_injection_rates, Bsumtree* left_injection_rates, Bsumtree* right_injection_rates);
    void Recompute_bulk(Bsumtree* non_injection_rates);
    void Recompute_injection(Bsumtree* injection_rates);
    
    /// Obtain time step
    double Timestep(votca::tools::Random2 *RandomVariable);
    
    /// Choose event according to random number generated by random variable
    Event* Choose_event_device(Events* events, Bsumtree* non_injection_rates, Bsumtree* left_injection_rates, Bsumtree* right_injection_rates, votca::tools::Random2 *RandomVariable);
    Event* Choose_event_bulk(Events* events, Bsumtree* non_injection_rates, votca::tools::Random2 *RandomVariable);
    Event* Choose_injection_event(Events* events, int electrodeID, Bsumtree* injection_rates, votca::tools::Random2 *RandomVariable);
    
    double &totprobsum() { return tot_probsum;}
    double &noninjectprobsum() { return non_inject_probsum;}
    double &leftinjectprobsum() { return left_inject_probsum;}
    double &rightinjectprobsum() { return right_inject_probsum;}
    
private:

    double tot_probsum;
    
    double non_inject_probsum;
    double left_inject_probsum;
    double right_inject_probsum;
    
};

}} 

#endif
