#!/bin/bash
#
# Copyright 2009-2016 The VOTCA Development Team (http://www.votca.org)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

version='@PROJECT_VERSION@ #CSG_HG_ID#'
cmd=""
args=2
debug=""
error=""

#failback define
die() {
  echo -e "$*" >&2
  exit 1
}

show_help () {
  cat << eof
==================================================
========   VOTCA (http://www.votca.org)   ========
==================================================

please submit bugs to bugs@votca.org

${0##*/}, version ${version}

This script calls scripts for the calculation of transfer
integrals using density-functional theory.
A working installation of either Gaussian 09 or Turbomole
is required!

Usage: ${0##*/} OPTIONS [--monomer|--check|--dimer|--write] key1 key2 key3 

Allowed options:
    --monomer        Calculation of a monomer
                     key1: G - Gaussian09
                           T - Turbomole
                     key2: XC/basis flag
    --check          Check monomer calculations
                     key1: first monomer
                     key2: last monomer
                     key3: G - Gaussian09
                           T - Turbomole
    --dimer          Calculation of a dimer + transfer integral
                     key1: G - Gaussian09
                           T - Turbomole
                     key2: XC/basis flag
    --write          Write calculated transfer integrals to state file!
                     key1: h - holes
                           e - electrons
                     key2: frameID
                     key3: state file
    --debug          Enable debug mode with a lot of information
    --error          Be more picky about error
-h, --help           Show this help

Examples:
* ${0##*/} --monomer G pbepbe/6-311G
* ${0##*/} --check 1 512 T
eof
}

while [[ ${1#-} != $1 ]]; do
 if [[ ${1#--} = $1 && -n ${1:2} ]]; then
    #short opt with arguments here: fc
    if [[ ${1#-[fc]} != ${1} ]]; then
       set -- "${1:0:2}" "${1:2}" "${@:2}"
    else
       set -- "${1:0:2}" "-${1:2}" "${@:2}"
    fi
 fi
 case $1 in
   --monomer|--check|--dimer|--write)
    [[ -n $cmd ]] && die "Only one option out of [--monomer|--check|--dimer|--write] possible"
    cmd="$1"
    shift ;;
  -h | --help)
    show_help
    exit 0;;
    --debug)
    debug="-x"
    shift;;
    --error)
    error="-e"
    shift;;
   -v | --version)
    echo "${0##*/}, version $version"
    exit 0;;
  *)
   die "Unknown option '$1'";;
 esac
done

#if needed copy VOTCASHARE guess code from csg_call
if [[ -n "$(type -p csg_call)" ]]; then
  VOTCASHARE="$(csg_call --show-share)" || die "csg_call --show-share failed"
  export VOTCASHARE
else
  die "Could not find csg_call"
fi

[[ -z $cmd ]] && die "Specify at least one option out of [--monomer|--check|--dimer|--write]"
args=1
case $cmd in
  --write)
     src="write_state.sh"
     ((args++))
     ((args++));;
   --monomer|--dimer)
     src="calc_${cmd#--}.sh";;
   --check)
     src="check_mols.sh"
     ((args++))
     ((args++));;
   *)
     die "Unknown command $cmd";;
esac
for ((i=1;i<=$args;i++)); do
  [[ -z ${!i} ]] && die "Option $cmd needs at least $args arguments"
done
[[ -f ${VOTCASHARE}/scripts/dipro/$src ]] || die "Could not find $cmd in ${VOTCASHARE}/scripts/dipro"
bash ${debug} ${error} ${VOTCASHARE}/scripts/dipro/$src "$@"
exit $?
